# Build machines configs.
machine-linux: &machine-linux
  docker:
    - image: electronbuilds/electron:0.0.8
  resource_class: 2xlarge

machine-mac: &machine-mac
  macos:
    xcode: "8.3.3"

# Build configurations options.
env-debug-build: &env-debug-build
  GN_CONFIG: //electron/build/args/debug.gn

env-testing-build: &env-testing-build
  GN_CONFIG: //electron/build/args/testing.gn

env-release-build: &env-release-build
  GN_CONFIG: //electron/build/args/release.gn
  BUILD_NATIVE_MKSNAPSHOT: false  # ARM(64) builds will redefine it.
  NOTIFY_SLACK: true

# Build targets options.
env-ia32: &env-ia32
  GN_EXTRA_ARGS: 'target_cpu = "x86"'
  NPM_CONFIG_ARCH: ia32

env-arm: &env-arm
  GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True'
  GN_EXTRA_ARGS: 'target_cpu = "arm"'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm

env-arm64: &env-arm64
  GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm64=True'
  GN_EXTRA_ARGS: 'target_cpu = "arm64" fatal_linker_warnings = false enable_linux_installer = false'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm64

env-mas: &env-mas
  GN_EXTRA_ARGS: 'is_mas_build = true'

# Individual (shared) steps.
step-maybe-notify-slack-failure: &step-maybe-notify-slack-failure
  run:
    name: Send a Slack notification on failure
    command: |
      if [ "$NOTIFY_SLACK" == "true" ]; then
        export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_fail

step-maybe-notify-slack-success: &step-maybe-notify-slack-success
  run:
    name: Send a Slack notification on success
    command: |
      if [ "$NOTIFY_SLACK" == "true" ]; then
        export MESSAGE="Build succeeded for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_success

step-add-depot-tools-to-path: &step-add-depot-tools-to-path
  run:
    name: Add depot tools to PATH
    command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV

step-setup-env-for-build: &step-setup-env-for-build
  run:
    name: Setup Environment Variables
    command: |
      # To find `gn` executable.
      echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV

      # https://github.com/mozilla/sccache
      SCCACHE_PATH="$PWD/src/electron/external_binaries/sccache"
      echo 'export SCCACHE_PATH="'"$SCCACHE_PATH"'"' >> $BASH_ENV

step-electron-gn-gen: &step-electron-gn-gen
  run:
    name: Electron GN gen
    command: |
      cd src
      gn gen out/Default --args='import("'$GN_CONFIG'") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"

step-electron-build: &step-electron-build
  run:
    name: Electron build
    command: |
      cd src
      ninja -C out/Default electron

step-electron-dist-build: &step-electron-dist-build
  run:
    name: Build dist.zip
    command: |
      cd src
      ninja -C out/Default electron:electron_dist_zip

step-electron-dist-store: &step-electron-dist-store
  store_artifacts:
    path: src/out/Default/dist.zip
    destination: dist.zip

step-nodejs-headers-build: &step-nodejs-headers-build
  run:
    name: Build Node.js headers
    command: |
      cd src
      ninja -C out/Default third_party/electron_node:headers

step-persist-data-for-tests: &step-persist-data-for-tests
  persist_to_workspace:
    root: .
    paths:
      # To run `gn args` for that dir.
      - src/out/Default/args.gn
      - src/out/Default/build.ninja

      # Build artifacts
      - src/out/Default/dist.zip
      - src/out/Default/gen/node_headers
      - src/out/ffmpeg/libffmpeg.dylib
      - src/out/ffmpeg/libffmpeg.so

step-electron-dist-unzip: &step-electron-dist-unzip
  run:
    name: Unzip dist.zip
    command: |
      cd src/out/Default
      # -o  overwrite files WITHOUT prompting
      # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
      unzip -o dist.zip

step-ffmpeg-gn-gen: &step-ffmpeg-gn-gen
  run:
    name: ffmpeg GN gen
    command: |
      cd src
      gn gen out/ffmpeg --args='import("//electron/build/args/ffmpeg.gn") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"

step-ffmpeg-build: &step-ffmpeg-build
  run:
    name: Non proprietary ffmpeg build
    command: |
      cd src
      ninja -C out/ffmpeg third_party/ffmpeg

step-ffmpeg-store: &step-ffmpeg-store
  store_artifacts:
    path: src/out/ffmpeg/libffmpeg.so
    destination: libffmpeg.so

step-verify-ffmpeg: &step-verify-ffmpeg
  run:
    name: Verify ffmpeg
    command: |
      cd src
      python electron/script/verify-ffmpeg.py --source-root "$PWD" --build-dir out/Default --ffmpeg-path out/ffmpeg

step-maybe-native-mksnapshot-gn-gen: &step-maybe-native-mksnapshot-gn-gen
  run:
    name: native mksnapshot GN gen
    command: |
      if [ "$BUILD_NATIVE_MKSNAPSHOT" == "true" ]; then
        cd src
        gn gen out/native_mksnapshot --args='import("//electron/build/args/native_mksnapshot.gn") cc_wrapper="'"$SCCACHE_PATH"'" v8_snapshot_toolchain="'"$MKSNAPSHOT_TOOLCHAIN"'"'" $GN_EXTRA_ARGS"
      fi

step-maybe-native-mksnapshot-build: &step-maybe-native-mksnapshot-build
  run:
    name: native mksnapshot (arm/arm64) build
    command: |
      if [ "$BUILD_NATIVE_MKSNAPSHOT" == "true" ]; then
        cd src
        ninja -C out/native_mksnapshot v8:mksnapshot
      fi

step-maybe-native-mksnapshot-store: &step-maybe-native-mksnapshot-store
  store_artifacts:
    path: src/out/native_mksnapshot/mksnapshot
    destination: mksnapshot

step-setup-for-headless-testing: &step-setup-for-headless-testing
  run:
    name: Setup for headless testing
    command: sh -e /etc/init.d/xvfb start

step-electron-tests-run: &step-electron-tests-run
  run:
    name: Run Electron tests
    environment:
      DISPLAY: ':99.0'
      MOCHA_REPORTER: mocha-multi-reporters
      MOCHA_FILE: junit/test-results.xml
      MOCHA_MULTI_REPORTERS: mocha-junit-reporter, tap
      ELECTRON_DISABLE_SECURITY_WARNINGS: 1
    command: |
      cd src
      export ELECTRON_OUT_DIR=Default
      (cd electron && npm run test -- --ci --enable-logging)

step-electron-tests-store-results: &step-electron-tests-store-results
  store_test_results:
    path: src/junit

step-show-sccache-stats: &step-show-sccache-stats
  run:
    name: Check sccache stats after build
    command: $SCCACHE_PATH -s

# Lists of steps.
steps-checkout: &steps-checkout
  steps:
    - checkout:
        path: src/electron
    - run:
        name: Get depot tools
        command: |
          git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
    - <<: *step-add-depot-tools-to-path

    # FIXME: Should be run only on MacOS.
    - run:
        name: Install gnu-tar
        command: |
          brew update
          brew install gnu-tar
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> $BASH_ENV

    - restore_cache:
        paths:
          - ~/.gclient-cache
        keys:
          - v2-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}
#          - v2-gclient-cache-{{ arch }}-
    - run:
        name: Gclient sync
        command: |
          # CircleCI does not support interpolation when setting environment variables.
          # https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
          echo 'export GIT_CACHE_PATH="$HOME/.gclient-cache"' >> $BASH_ENV
          source $BASH_ENV

          gclient config \
            --name "src/electron" \
            --unmanaged \
            $GCLIENT_EXTRA_ARGS \
            "$CIRCLE_REPOSITORY_URL"

          gclient sync --with_branch_heads --with_tags
    - save_cache:
        paths:
          - ~/.gclient-cache
        key: v2-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}
    - run:
        name: Remove some unused data to avoid storing it in the workspace
        command: |
          rm -rf src/android_webview
          rm -rf src/ios
          rm -rf src/third_party/WebKit/LayoutTests
    - persist_to_workspace:
        root: .
        paths:
          - depot_tools
          - src

steps-debug-build: &steps-debug-build
  steps:
    - attach_workspace:
        at: .
    - <<: *step-add-depot-tools-to-path
    - <<: *step-setup-env-for-build

    # Electron app
    - <<: *step-electron-gn-gen
    - <<: *step-electron-build

    - <<: *step-show-sccache-stats

steps-testing-build: &steps-testing-build
  steps:
    - attach_workspace:
        at: .
    - <<: *step-add-depot-tools-to-path
    - <<: *step-setup-env-for-build

    # Electron app
    - <<: *step-electron-gn-gen
    - <<: *step-electron-build
    - <<: *step-electron-dist-build
    - <<: *step-electron-dist-store

    # ffmpeg
    - <<: *step-ffmpeg-gn-gen
    - <<: *step-ffmpeg-build
    - <<: *step-ffmpeg-store

    # Node.js headers
    - <<: *step-nodejs-headers-build

    - <<: *step-show-sccache-stats

    # Save all data needed for a further tests run.
    - <<: *step-persist-data-for-tests

steps-release-build: &steps-release-build
  steps:
    - attach_workspace:
        at: .
    - <<: *step-add-depot-tools-to-path
    - <<: *step-setup-env-for-build

    # Electron app
    - <<: *step-electron-gn-gen
    - <<: *step-electron-build
    - <<: *step-electron-dist-build
    - <<: *step-electron-dist-store

    # ffmpeg
    - <<: *step-ffmpeg-gn-gen
    - <<: *step-ffmpeg-build
    - <<: *step-ffmpeg-store

    # native mksnapshot
    - <<: *step-maybe-native-mksnapshot-gn-gen
    - <<: *step-maybe-native-mksnapshot-build
    - <<: *step-maybe-native-mksnapshot-store

    # Node.js headers
    - <<: *step-nodejs-headers-build

    - <<: *step-show-sccache-stats

    # Save all data needed for a further tests run.
    - <<: *step-persist-data-for-tests

    - <<: *step-maybe-notify-slack-failure
    - <<: *step-maybe-notify-slack-success

steps-tests: &steps-tests
  steps:
    - attach_workspace:
        at: .
    - <<: *step-add-depot-tools-to-path
    - <<: *step-electron-dist-unzip
    - <<: *step-setup-for-headless-testing

    - <<: *step-verify-ffmpeg

    - <<: *step-electron-tests-run
    - <<: *step-electron-tests-store-results

# TODO: It looks almost exactly like the generic "steps-testing-build".
steps-mac-build: &steps-mac-build
  steps:
    - attach_workspace:
        at: .
    - <<: *step-add-depot-tools-to-path
    - <<: *step-setup-env-for-build

# FIXME: Do we need these for the build or the tests?
#    - run:
#        name: Install Node.js 10 on MacOS
#        command: |
#          echo 'Installing Node.js 10 for MacOS'
#          brew update
#          brew install node@10

    # Electron app
    - <<: *step-electron-gn-gen
    - <<: *step-electron-build
    - <<: *step-electron-dist-build
    - <<: *step-electron-dist-store

    # ffmpeg
    - <<: *step-ffmpeg-gn-gen
    - <<: *step-ffmpeg-build
    - <<: *step-ffmpeg-store

    # Node.js headers for tests
    - <<: *step-nodejs-headers-build

    - <<: *step-show-sccache-stats

    # TODO: extract the following into a separate job. Or reuse "steps-tests".
    - <<: *step-verify-ffmpeg

    - <<: *step-electron-tests-run
    - <<: *step-electron-tests-store-results

# List of all jobs.
version: 2
jobs:
  # Layer 1: Checkout.
  linux-checkout:
    <<: *machine-linux
    <<: *steps-checkout

  linux-arm-checkout:
    <<: *machine-linux
    environment:
      <<: *env-arm
    <<: *steps-checkout

  linux-arm64-checkout:
    <<: *machine-linux
    environment:
      <<: *env-arm64
    <<: *steps-checkout

  mac-checkout:
    <<: *machine-mac
    <<: *steps-checkout

  # Layer 2: Builds.
  linux-x64-debug:
    <<: *machine-linux
    environment:
      <<: *env-debug-build
    <<: *steps-debug-build

  linux-x64-testing:
    <<: *machine-linux
    environment:
      <<: *env-testing-build
    <<: *steps-testing-build

  linux-x64-release:
    <<: *machine-linux
    environment:
      <<: *env-release-build
    <<: *steps-release-build

  linux-ia32-debug:
    <<: *machine-linux
    environment:
      <<: *env-ia32
      <<: *env-debug-build
    <<: *steps-debug-build

  linux-ia32-testing:
    <<: *machine-linux
    environment:
      <<: *env-ia32
      <<: *env-testing-build
    <<: *steps-testing-build

  linux-ia32-release:
    <<: *machine-linux
    environment:
      <<: *env-ia32
      <<: *env-release-build
    <<: *steps-release-build

  linux-arm-debug:
    <<: *machine-linux
    environment:
      <<: *env-arm
      <<: *env-debug-build
    <<: *steps-debug-build

  linux-arm-testing:
    <<: *machine-linux
    environment:
      <<: *env-arm
      <<: *env-testing-build
    <<: *steps-testing-build

  linux-arm-release:
    <<: *machine-linux
    environment:
      <<: *env-arm
      <<: *env-release-build
      BUILD_NATIVE_MKSNAPSHOT: true
    <<: *steps-release-build

  linux-arm64-debug:
    <<: *machine-linux
    environment:
      <<: *env-arm64
      <<: *env-debug-build
    <<: *steps-debug-build

  linux-arm64-testing:
    <<: *machine-linux
    environment:
      <<: *env-arm64
      <<: *env-testing-build
    <<: *steps-testing-build

  linux-arm64-release:
    <<: *machine-linux
    environment:
      <<: *env-arm64
      <<: *env-release-build
      BUILD_NATIVE_MKSNAPSHOT: true
    <<: *steps-release-build

  osx-testing:
    <<: *machine-mac
    environment:
      <<: *env-testing-build
    <<: *steps-mac-build

  mas-testing:
    <<: *machine-mac
    environment:
      <<: *env-mas
      <<: *env-testing-build
    <<: *steps-mac-build

  # Layer 3: Tests.
  linux-x64-testing-tests:
    <<: *machine-linux
    <<: *steps-tests

  linux-x64-release-tests:
    <<: *machine-linux
    <<: *steps-tests

  linux-ia32-testing-tests:
    <<: *machine-linux
    environment:
      <<: *env-ia32
    <<: *steps-tests

  linux-ia32-release-tests:
    <<: *machine-linux
    environment:
      <<: *env-ia32
    <<: *steps-tests

workflows:
  version: 2

# FIXME
  build-mac:
    jobs:
      - mac-checkout
      - mas-testing:
          requires:
            - mac-checkout
      - osx-testing:
          requires:
            - mac-checkout

# FIXME
#  build-linux:
#    jobs:
#      - linux-checkout
#      - linux-arm-checkout
#      - linux-arm64-checkout
#
#      - linux-x64-debug:
#          requires:
#            - linux-checkout
#      - linux-x64-testing:
#          requires:
#            - linux-checkout
#      - linux-x64-testing-tests:
#          requires:
#            - linux-x64-testing
#      - linux-ia32-debug:
#          requires:
#            - linux-checkout
#      - linux-ia32-testing:
#          requires:
#            - linux-checkout
#      - linux-ia32-testing-tests:
#          requires:
#            - linux-ia32-testing
#      - linux-arm-debug:
#          requires:
#            - linux-arm-checkout
#      - linux-arm-testing:
#          requires:
#            - linux-arm-checkout
#      - linux-arm64-debug:
#          requires:
#            - linux-arm64-checkout
#      - linux-arm64-testing:
#          requires:
#            - linux-arm64-checkout

  build-mac-fork-prs:
    jobs:
      - electron-mas-testing:
          filters:
            branches:
              # only from forks
              only: /^pull\/.*$/
      - electron-osx-testing:
          filters:
            branches:
              # only from forks
              only: /^pull\/.*$/

  nightly-release-test:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - linux-checkout
      - linux-arm-checkout
      - linux-arm64-checkout

      - linux-x64-release:
          requires:
            - linux-checkout
      - linux-x64-release-tests:
          requires:
            - linux-x64-release
      - linux-ia32-release:
          requires:
            - linux-checkout
      - linux-ia32-release-tests:
          requires:
            - linux-ia32-release
      - linux-arm-release:
          requires:
            - linux-arm-checkout
      - linux-arm64-release:
          requires:
            - linux-arm64-checkout
